<>Git (also known as verion controller system)
  *git is a widly used verion controller system.
  mercurial,svn

  *Git is a tool we installed in our computer,its work without internet

  *GitHub,GitLab are not a tool these are a server.

  *Git is not build for a specific language,we can use git in every programming language.
  if we initialize git in one folder git will pin a little or large changes in the folder every time.

  *Git is version history for code

  <>USE OF Git
    1.Tracking history
     It will show the changes what we made in the code,it will show the previous and updated code

    2.Collabration
      Work with more developers and easy to collabrate the code

    3.Backup
      Git sever will store every project details and source code,we can easly track the code.
    
    4.Multiple features
      we can do multiple task
      like frontEnd and backend

    5.Status Tracking
      we can track every line of code and what changes are we made in the code,we can easly track.

      if made any mistake in the code and we cant find whare we made a mistake.useing git we can  easly track the mistake we made and we can easly solve it, like we can switch the code into orginal code(privious code).


There are two type of version controll system
  1.CVCS(Centralized vcs)
  2.DVCS(Distributed vcs)

  1.CVCS(examples:GitHub,getLab.. etc)
    There is centralized server where we create a versions.in this case we need a full time internet connection.

  2.DVCS(git)
    it is a distribute vcs.we dont need to server to use this vcs.


Git Commands
    ls(windows:dir) = list the file and folder in the current folder
  1.git init
    This command used to initialize git into this project
    ls -al

  2.git status
   This command will show what is going on in the folder

  3.git add filename
    This command add the file into git
    OR
    git add . (. shown as the current folder)
    It will add to git all the file and folder in the current folder.

  4.git commit -m "message"
    -m(means message) is used to write a message
    This command is used to create a version.
    examaple: git commit -m "first commit"

  5.git log  
    git log is used to find how many commit are we made,this command will shows full commit details.

    *git log:only shows current commit as well as all the commit behind the current commit not any commit infront of it. 

    *git log --all:to get all commit current commit and all other commit are we made.

  6.git checkout <40 digit commit id>
    This command is used to visit to vertions.
    if we want to checkout the previous version we can easly check using this command

    Example:git checkout be9a9774536492d0abebf6b00dc6a2303e747c78

  7.git commit -m "pervious version name" --amend
    Instead of creating a new commit(version) these changes are just going to go in the previous commit.

  8.git reset filename or foldername
    OR
    git reset . (. show current folder)
    we want take the changes from staging area and put the changes back to working area(working area name is changes),we use git reset.

  9.git checkout -- filename
     We need to reset the changes from the working area(changes),we want to remove the changes we made.
    OR
      git checkout -- .
      it will remove all changed file from working area
  
  10.git log --all --graph
    It will start showing you the branging effect.

  11.git checkout master
    This comment will direct us to lates commit of the branch.

  12.git checkout version id(commit id) fileName or .
    This commend is used to resore the previous version content.
    example:git checkout 4292a672a903414fff856c245efd68f78fe4d3b7 .


<>HEAD and MASTER
  *HEAD:will show as which version are currently viewing or working,
    which version(commit) Id we currently working on,the head will move to that commit id.
  *MASTER:master will stand on the latest commit Id.
     back to master:git checkout master


<>Restore Code
  git checkout version id(commit id) fileName or .
    This commend is used to resore the previous version code or content.

    example:git checkout 4292a672a903414fff856c245efd68f78fe4d3b7 .
    Restore verithing from the previous version.




